import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'package:intl/intl.dart';
import '../models/feeding_model.dart';
import '../services/feeding_provider.dart';
import '../services/pet_provider.dart';

class FeedingLogScreen extends StatefulWidget {
  final String petId;
  final String? scheduleId; // Optional schedule to pre-populate data

  const FeedingLogScreen({
    super.key,
    required this.petId,
    this.scheduleId,
  });

  @override
  State<FeedingLogScreen> createState() => _FeedingLogScreenState();
}

class _FeedingLogScreenState extends State<FeedingLogScreen> {
  final _formKey = GlobalKey<FormState>();
  final _foodTypeController = TextEditingController();
  final _amountController = TextEditingController();
  final _notesController = TextEditingController();
  
  String _unit = 'cups';
  DateTime _timestamp = DateTime.now();
  
  // Available units
  final List<String> _unitOptions = ['cups', 'grams', 'ounces', 'cans', 'servings'];

  @override
  void initState() {
    super.initState();
    
    // If scheduleId is provided, pre-populate from the schedule
    if (widget.scheduleId != null) {
      WidgetsBinding.instance.addPostFrameCallback((_) {
        final feedingProvider = Provider.of<FeedingProvider>(context, listen: false);
        final schedules = feedingProvider.schedules;
        final schedule = schedules.firstWhere(
          (s) => s.id == widget.scheduleId,
          orElse: () => throw Exception('Schedule not found: ${widget.scheduleId}'),
        );
        
        _foodTypeController.text = schedule.foodType;
        _amountController.text = schedule.amount.toString();
        _unit = schedule.unit;
      });
    }
  }

  @override
  void dispose() {
    _foodTypeController.dispose();
    _amountController.dispose();
    _notesController.dispose();
    super.dispose();
  }

  // Show date picker
  Future<void> _selectDate(BuildContext context) async {
    final DateTime? pickedDate = await showDatePicker(
      context: context,
      initialDate: _timestamp,
      firstDate: DateTime.now().subtract(const Duration(days: 30)),
      lastDate: DateTime.now(),
    );
    
    if (pickedDate != null) {
      setState(() {
        _timestamp = DateTime(
          pickedDate.year,
          pickedDate.month,
          pickedDate.day,
          _timestamp.hour,
          _timestamp.minute,
        );
      });
    }
  }

  // Show time picker
  Future<void> _selectTime(BuildContext context) async {
    final TimeOfDay? pickedTime = await showTimePicker(
      context: context,
      initialTime: TimeOfDay.fromDateTime(_timestamp),
    );
    
    if (pickedTime != null) {
      setState(() {
        _timestamp = DateTime(
          _timestamp.year,
          _timestamp.month,
          _timestamp.day,
          pickedTime.hour,
          pickedTime.minute,
        );
      });
    }
  }

  // Save feeding log
  void _saveLog() {
    if (_formKey.currentState!.validate()) {
      final feedingProvider = Provider.of<FeedingProvider>(context, listen: false);
      
      // Parse amount
      final amount = double.tryParse(_amountController.text);
      if (amount == null || amount <= 0) {
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(content: Text('Please enter a valid amount')),
        );
        return;
      }
      
      // Create new log
      final log = FeedingLog(
        id: '', // Will be generated by provider
        scheduleId: widget.scheduleId ?? '',
        petId: widget.petId,
        timestamp: _timestamp,
        amount: amount,
        unit: _unit,
        foodType: _foodTypeController.text,
        notes: _notesController.text.isEmpty ? null : _notesController.text,
      );
      
      feedingProvider.addLog(log);
      Navigator.pop(context);
    }
  }

  @override
  Widget build(BuildContext context) {
    final petProvider = Provider.of<PetProvider>(context, listen: false);
    final pet = petProvider.pets.firstWhere((pet) => pet.id == widget.petId);
    
    return Scaffold(
      appBar: AppBar(
        title: const Text('Log Feeding'),
      ),
      body: SingleChildScrollView(
        padding: const EdgeInsets.all(16),
        child: Form(
          key: _formKey,
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              // Pet information
              Card(
                child: Padding(
                  padding: const EdgeInsets.all(16),
                  child: Row(
                    children: [
                      const Icon(Icons.pets, size: 24),
                      const SizedBox(width: 16),
                      Text(
                        'For: ${pet.name}',
                        style: const TextStyle(
                          fontSize: 16,
                          fontWeight: FontWeight.bold,
                        ),
                      ),
                    ],
                  ),
                ),
              ),
              const SizedBox(height: 16),
              
              // Date and time
              Card(
                child: Padding(
                  padding: const EdgeInsets.all(16),
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      const Text(
                        'When?',
                        style: TextStyle(fontWeight: FontWeight.bold, fontSize: 16),
                      ),
                      const SizedBox(height: 8),
                      Row(
                        children: [
                          Expanded(
                            child: InkWell(
                              onTap: () => _selectDate(context),
                              child: InputDecorator(
                                decoration: const InputDecoration(
                                  labelText: 'Date',
                                  border: OutlineInputBorder(),
                                ),
                                child: Text(
                                  DateFormat('EEE, MMM d, yyyy').format(_timestamp),
                                ),
                              ),
                            ),
                          ),
                          const SizedBox(width: 16),
                          Expanded(
                            child: InkWell(
                              onTap: () => _selectTime(context),
                              child: InputDecorator(
                                decoration: const InputDecoration(
                                  labelText: 'Time',
                                  border: OutlineInputBorder(),
                                ),
                                child: Text(
                                  DateFormat('h:mm a').format(_timestamp),
                                ),
                              ),
                            ),
                          ),
                        ],
                      ),
                    ],
                  ),
                ),
              ),
              const SizedBox(height: 16),
              
              // Food type
              TextFormField(
                controller: _foodTypeController,
                decoration: const InputDecoration(
                  labelText: 'Food Type',
                  hintText: 'e.g., Dry Kibble, Wet Food, etc.',
                  border: OutlineInputBorder(),
                ),
                validator: (value) {
                  if (value == null || value.isEmpty) {
                    return 'Please enter food type';
                  }
                  return null;
                },
              ),
              const SizedBox(height: 16),
              
              // Amount and unit
              Row(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  // Amount
                  Expanded(
                    flex: 2,
                    child: TextFormField(
                      controller: _amountController,
                      decoration: const InputDecoration(
                        labelText: 'Amount',
                        border: OutlineInputBorder(),
                      ),
                      keyboardType: TextInputType.number,
                      validator: (value) {
                        if (value == null || value.isEmpty) {
                          return 'Required';
                        }
                        final amount = double.tryParse(value);
                        if (amount == null || amount <= 0) {
                          return 'Invalid amount';
                        }
                        return null;
                      },
                    ),
                  ),
                  const SizedBox(width: 8),
                  // Unit
                  Expanded(
                    flex: 1,
                    child: InputDecorator(
                      decoration: const InputDecoration(
                        labelText: 'Unit',
                        border: OutlineInputBorder(),
                      ),
                      child: DropdownButtonHideUnderline(
                        child: DropdownButton<String>(
                          value: _unit,
                          isDense: true,
                          onChanged: (value) {
                            if (value != null) {
                              setState(() {
                                _unit = value;
                              });
                            }
                          },
                          items: _unitOptions.map((unit) {
                            return DropdownMenuItem<String>(
                              value: unit,
                              child: Text(unit),
                            );
                          }).toList(),
                        ),
                      ),
                    ),
                  ),
                ],
              ),
              const SizedBox(height: 16),
              
              // Notes
              TextFormField(
                controller: _notesController,
                decoration: const InputDecoration(
                  labelText: 'Notes (Optional)',
                  hintText: 'e.g., Ate quickly, Left some food, etc.',
                  border: OutlineInputBorder(),
                ),
                maxLines: 3,
              ),
              const SizedBox(height: 24),
              
              // Save button
              SizedBox(
                width: double.infinity,
                height: 50,
                child: ElevatedButton(
                  onPressed: _saveLog,
                  child: const Text(
                    'Save Feeding Log',
                    style: TextStyle(fontSize: 16),
                  ),
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }
} 